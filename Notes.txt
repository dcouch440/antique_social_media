Liked Serialization format:
  The liked function that is used in antiques uses the users_id to map through the array and query if the user is found along with the antique ID.

Authorization:
  about:  The JWT token that is stored within the Cookie should either have an option to send the cookie data (and get user features)
  Providing the token gives access to the immutable req object attribute object, found in (get current user)

  Currently theres a 2 step verification,

    One:  :(get) the router verifies the user through the token.
          This gives the req object the immutable attribute that are then sent through.
          Its worth noting that it might be worth researching what a spread operator could do to these attributes.

    two:  :(post) The request uses that same header value to re verify the token,
          Then comparisons are made between the body user_id,
          the original token user_id and the newly verified user_id. Overkill? Not sure.


Image brainstorm, upload image > returning url? store url with antique posting.



Antiques routes
  get     /antiques
    ?LIMIT= %OFFSET=
  post    /antiques
    name: str, year: int, user:{id: int}, fileStr: str < FROM body
  destroy /antiques/:id
    id (params)
  show    /antiques/:id

Like routes
  post /like
    antique_id: int
    user_id: int

  post /unlike
    antique_id: int
    user_id: int

User Routes
  post /users/signIn
    username: str, password: str, email: str
  post /users/signup
    username: str, password: str, email: str
  get /users/:id/antiques
    (id) params

Image routes
  post /uploads
    fileStr, antique_id




current state of antiques,
  This is designed to have a list of antiques with image,

  {
    "id": 3,
    "name": "Sigmund",
    "year": 1445,
    "user_id": 2,
    "created_at": "2021-04-21T03:15:34.408Z",
    "updated_at": "2021-04-21T03:15:34.408Z",
    "deleted_at": null,
    "likes": [
        {
            "id": 2,
            "antique_id": 1,
            "user_id": 1,
            "username": "seed_user",
            "created_at": "2021-04-21T01:58:39.856Z",
            "updated_at": "2021-04-21T01:58:39.856Z",
            "deleted_at": null
        },
        {
            "id": 1,
            "antique_id": 1,
            "user_id": 2,
            "username": "User/9f2f1ab0-ead3-460e-8c14-f6508ab4439b",
            "created_at": "2021-04-21T01:58:39.843Z",
            "updated_at": "2021-04-21T01:58:39.843Z",
            "deleted_at": null
        },
        {
            "id": 20,
            "antique_id": 1,
            "user_id": 3,
            "username": "Corine_Becker",
            "created_at": "2021-04-21T03:22:56.903Z",
            "updated_at": "2021-04-21T03:22:56.903Z",
            "deleted_at": null
        }
    ],
    "images": [
        {
            "id": 1,
            "antique_id": 1,
            "image_url": "https://res.cloudinary.com/dbyretay5/image/upload/v1618970318/_ANTIQUE_1_/fairy_gvrksm.jpg",
            "public_id": "_ANTIQUE_1_/fairy_gvrksm",
            "resource_type": "image",
            "width": 256,
            "height": 256,
            "format": "jpg",
            "created_at": "2021-04-21T01:58:39.827Z",
            "updated_at": "2021-04-21T01:58:39.827Z",
            "deleted_at": null
        }
    ],
    "liked": true,
    "posted": "an hour ago",
    "logged_in": true,
    "email": "Jon23433@yahoo.com",
    "username": "Corine_Becker",
    "password_digest": "$2b$12$Bc38NhLDcPyckpOQyVVFTeAQ8UsY0cHEyGeoSLiD72PQ7T.1slpLe"